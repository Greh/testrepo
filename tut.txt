My git tutorial

1. Straightforward Merge:
	Master as 3 commits and a branch has 3 commits. Nothing is happening on remote
	To have all changes to be included in master
	do:
		git checkout master
		git merge branch
	There will be conflicts because one file is modified in two locations
	To accept all merges just do git add .
	Then it will ask for a merge commit message
	At this point master is ahead by 3 commits from origin/master
	Run git push origin master

2. What to do with tut.txt
	At this point tut.txt exists in master but not in br1
	Right now since br1 is merged, it can be deleted and recreated
	There is no remote br1 branch so this can be done
	
3. What if there was a remote branch too?
<<<<<<< HEAD
	I'm in master now, and none of my changes in br1 are visible.
	So I'll do a merge, and I will get some conflicts.	
=======
	I have now checked out br1 later in the tree history
	I will add 3 commits to this branch
	Then do a git push to a remote branch also called br1
<<<<<<< HEAD
>>>>>>> br1
	Notice that it picked master first? - this is dicey when 
	doing it for files which are not that straightforward
	Doing git push origin master will push all the merges
        to master and br1 is still hanging over there

4. Rebasing:
	Master is one commit ahead right now.
	Applying 3 commits to br1
	Then do rebase so I can get this change that I did on master 
	
	Run git checkout br1 - master
	Added commit 1 on top of br1 - br1
	Make 3 commits onto br1 - master
	Added commit 2 on top of commit 1 -br1
	run git rebase master - master
	Added commit 3 on top of commit 1 - br1
	
	I'm still on br1 but notice that I now have the change from
	master
	There were conflicts as we rebased
	To resolve them I did git add
	That will produce the markings showing where it came from
	like in 3.
	I've cleaned them up but maintained the order in which
	the changes on br1 got applied onto master

	Now I commit these changes
	And then do a merge:
	git checkout master
	git merge br1 

	I am back to br1 and notice that origin/br1 is behind
	So I do git push origin HEAD:refs/heads/br1 to bring the
	two up to date.
	

	Then I switch to br1 and make this commit

	Made my changes in br2 and now I will make another commit
	in br1

<<<<<<< HEAD
        ----------------------------
        I'm on br1 now and I want to cherry-pick a patch
        from master.
        I will run git cherry-pick <sha>.
=======
	I am now on master - but I don't see any of the conflict changes..
	That is because master is still back where the rebasing started.
	I will now have to do a fast foward merge which is just bringing the
	master pointer where the br2 pointer is
	git merge br2

6. Cherry-picking:
       I'm on master now
       I will commit this on master
       I want this change on br1 which is lagging behind somewhere	
>>>>>>> 017d2a5... A commit on master that I want on br1
